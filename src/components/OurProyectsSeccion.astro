---
// src/components/ProjectsSection.astro
import { ArrowRight } from "lucide-react";

interface Project {
  id: number;
  title: string;
  description: string;
  image: string;
  alt: string;
}

const projects: Project[] = [
  {
    id: 1,
    title: "Residential Land Clearing",
    description: "Complete land clearing for residential development",
    image: "/images/maquina1.webp",
    alt: "Excavation equipment working",
  },
  {
    id: 2,
    title: "Commercial Excavation",
    description: "Precision excavation for commercial building",
    image: "/images/maquina1.webp",
    alt: "Commercial construction site",
  },
  {
    id: 3,
    title: "Water Delivery",
    description: "Non-potable water for agriculture",
    image: "images/maquina1.webp",
    alt: "Water delivery truck",
  },
  {
    id: 4,
    title: "Utility Trenching",
    description: "Trenching for neighborhood utilities",
    image: "images/maquina1.webp",
    alt: "Underground utility work",
  },
];
---

<section id="projects" class="bg-gray-50 relative dark:bg-dark-800 py-16 md:py-24 px-4 z-10 sm:px-6 overflow-hidden">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-12 md:mb-16">
      <span
        class="inline-block px-4 py-1.5 text-xs font-semibold text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/30 rounded-full mb-4 tracking-wider"
      >
        PORTFOLIO
      </span>
      <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4">
        Our <span class="text-yellow-500 dark:text-yellow-400">Projects</span>
      </h2>
      <div
        class="mx-auto w-24 h-1.5 bg-gradient-to-r from-yellow-400 to-yellow-600 dark:from-yellow-500 dark:to-yellow-400 rounded-full mb-6"
      >
      </div>
      <p class="max-w-2xl mx-auto text-gray-600 dark:text-gray-300 text-sm md:text-base">
        We take pride in our diverse portfolio of successful projects across Hawaii.
      </p>
    </div>

    <!-- Desktop Grid (md+) -->
    <div class="hidden md:grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6">
      {
        projects.map((project: Project) => (
          <div class="group relative overflow-hidden rounded-2xl shadow-lg hover:shadow-xl transition-all duration-500 h-[380px]">
            <img
              src={project.image}
              alt={project.alt}
              class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
              loading="lazy"
              width="400"
              height="380"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent flex flex-col justify-end p-6">
              <h3 class="text-xl font-bold text-white mb-2">{project.title}</h3>
              <p class="text-gray-200 mb-4 text-sm">{project.description}</p>
              <a
                href="#"
                class="inline-flex items-center text-yellow-400 hover:text-yellow-300 font-medium transition-colors text-sm"
              >
                View details <ArrowRight className="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" />
              </a>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Enhanced Mobile Carousel -->
    <div class="md:hidden relative">
      <!-- Navigation Arrows -->
      <button
        class="absolute left-2 top-1/2 -translate-y-1/2 z-10 bg-white/80 dark:bg-dark-700/80 p-2 rounded-full shadow-md hover:bg-white dark:hover:bg-dark-600 transition-colors duration-200"
        id="prevButton"
      >
        <svg class="w-5 h-5 text-gray-800 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        class="absolute right-2 top-1/2 -translate-y-1/2 z-10 bg-white/80 dark:bg-dark-700/80 p-2 rounded-full shadow-md hover:bg-white dark:hover:bg-dark-600 transition-colors duration-200"
        id="nextButton"
      >
        <svg class="w-5 h-5 text-gray-800 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Carousel Container -->
      <div
        id="mobileCarousel"
        class="flex overflow-x-auto snap-x snap-mandatory no-scrollbar pb-8 -mx-4 px-4 scroll-smooth"
      >
        {
          projects.map((project: Project, index: number) => (
            <div id={`slide-${project.id}-${index}`} class="flex-shrink-0 w-[85vw] sm:w-[70vw] mr-6 snap-center">
              <div class="relative overflow-hidden rounded-xl shadow-lg h-[320px]">
                <img
                  src={project.image}
                  alt={project.alt}
                  class="w-full h-full object-cover"
                  loading="lazy"
                  width="340"
                  height="320"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent flex flex-col justify-end p-6">
                  <h3 class="text-lg font-bold text-white mb-2">{project.title}</h3>
                  <p class="text-gray-200 mb-4 text-xs">{project.description}</p>
                  <a
                    href="#"
                    class="inline-flex items-center text-yellow-400 hover:text-yellow-300 font-medium transition-colors text-xs"
                  >
                    View details <ArrowRight className="w-3 h-3 ml-1.5" />
                  </a>
                </div>
              </div>
            </div>
          ))
        }
      </div>

      <!-- Enhanced Scroll Indicators -->
      <div class="flex justify-center mt-4 space-x-2">
        {
          projects.map((_: Project, index: number) => (
            <button
              data-index={index}
              class="w-2 h-2 rounded-full bg-gray-300 dark:bg-gray-600 transition-all duration-300 indicator-dot hover:bg-yellow-500 dark:hover:bg-yellow-400"
              aria-label={`Go to slide ${index + 1}`}
            />
          ))
        }
      </div>
    </div>

    <!-- CTA Button -->
    <div class="text-center mt-12 md:mt-16">
      <a
        href="#contact"
        class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-500 text-white font-medium rounded-lg transition-all duration-300 shadow-md hover:shadow-lg text-sm md:text-base"
      >
        View All Projects
        <ArrowRight className="w-4 h-4 md:w-5 md:h-5 ml-2 transition-transform group-hover:translate-x-1" />
      </a>
    </div>
  </div>

  <style is:global>
    /* Hide scrollbar but keep functionality */
    .no-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
    .no-scrollbar::-webkit-scrollbar {
      display: none;
    }

    /* Snap effect for carousel */
    .snap-x {
      scroll-snap-type: x mandatory;
    }
    .snap-center {
      scroll-snap-align: center;
    }

    /* Active indicator style */
    .indicator-dot.active {
      width: 1rem;
      background-color: #f59e0b;
    }
  </style>
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const carousel = document.getElementById("mobileCarousel");
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const dots = document.querySelectorAll(".indicator-dot");
    const slides = carousel.querySelectorAll("div[id^='slide-']");
    let autoScrollInterval;
    let isDragging = false;
    let startX, scrollLeft;
    let currentIndex = 0;

    function updateIndicators() {
      dots.forEach((dot, index) => {
        dot.classList.toggle("active", index === currentIndex);
      });
    }

    function goToSlide(index) {
      if (index < 0) index = slides.length - 1;
      if (index >= slides.length) index = 0;
      currentIndex = index;
      const slide = slides[index];
      carousel.scrollTo({
        left: slide.offsetLeft - (carousel.offsetWidth - slide.offsetWidth) / 2,
        behavior: "smooth",
      });
      updateIndicators();
    }

    function startAutoScroll() {
      autoScrollInterval = setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 5000); // 5 seconds
    }

    function stopAutoScroll() {
      clearInterval(autoScrollInterval);
    }

    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener("click", () => {
        stopAutoScroll();
        goToSlide(index);
        startAutoScroll();
      });
    });

    // Button navigation
    nextButton.addEventListener("click", () => {
      stopAutoScroll();
      goToSlide(currentIndex + 1);
      startAutoScroll();
    });

    prevButton.addEventListener("click", () => {
      stopAutoScroll();
      goToSlide(currentIndex - 1);
      startAutoScroll();
    });

    // Optional: Pause auto-scroll on drag
    carousel.addEventListener("mousedown", (e) => {
      isDragging = true;
      startX = e.pageX - carousel.offsetLeft;
      scrollLeft = carousel.scrollLeft;
      stopAutoScroll();
    });

    carousel.addEventListener("mouseleave", () => {
      if (isDragging) {
        isDragging = false;
        startAutoScroll();
      }
    });

    carousel.addEventListener("mouseup", () => {
      isDragging = false;
      startAutoScroll();
    });

    carousel.addEventListener("mousemove", (e) => {
      if (!isDragging) return;
      e.preventDefault();
      const x = e.pageX - carousel.offsetLeft;
      const walk = (x - startX) * 1.5; // Scroll speed
      carousel.scrollLeft = scrollLeft - walk;
    });

    // Initial setup
    goToSlide(0);
    startAutoScroll();
  });
</script>

</section>
